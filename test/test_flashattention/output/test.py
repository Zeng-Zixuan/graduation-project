import re


def extract_metrics(text):
    # Define the regex patterns for the metrics
    patterns = {
        "train_loss": r"train_loss:([\d\.]+)",
        "train_acc": r"train_acc:([\d\.]+)",
        "train_f1": r"train_f1:([\d\.]+)",
        "eval_loss": r"eval_loss:([\d\.]+)",
        "eval_acc": r"eval_acc:([\d\.]+)",
        "eval_f1": r"eval_f1:([\d\.]+)",
    }

    # Initialize a dictionary to hold the extracted metrics
    metrics = {
        "train_loss": [],
        "train_acc": [],
        "train_f1": [],
        "eval_loss": [],
        "eval_acc": [],
        "eval_f1": [],
    }

    # Extract the metrics using regex and append to the respective lists
    for key, pattern in patterns.items():
        matches = re.findall(pattern, text)
        metrics[key] = [float(match) for match in matches]

    return metrics


# Provided text
text = """
epoch:1 train_loss:0.5578398527922453 train_acc:0.7219193020719739 train_f1:0.8045228056726714
        eval_loss:0.5473138314706308  eval_acc:0.736231884057971   eval_f1:0.832535885167464
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:35<00:00,  1.16it/s, train-loss=0.33]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.76it/s, eval-loss=0.78]
epoch:2 train_loss:0.3285983216528799 train_acc:0.8647764449291166 train_f1:0.901195219123506
        eval_loss:0.777088447853371  eval_acc:0.7808695652173913   eval_f1:0.8546153846153847
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:35<00:00,  1.16it/s, train-loss=0.19]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.74it/s, eval-loss=0.71]
epoch:3 train_loss:0.19387631218937226 train_acc:0.9252998909487459 train_f1:0.9448025785656728
        eval_loss:0.7137975339536313  eval_acc:0.8168115942028985   eval_f1:0.8743038981702467
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:35<00:00,  1.16it/s, train-loss=0.11]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.75it/s, eval-loss=0.64]
epoch:4 train_loss:0.10808298946206087 train_acc:0.9621046892039259 train_f1:0.9720603015075377
        eval_loss:0.6379048382794416  eval_acc:0.8179710144927537   eval_f1:0.8588129496402876
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:35<00:00,  1.16it/s, train-loss=0.08]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.75it/s, eval-loss=0.87]
epoch:5 train_loss:0.08010279171347358 train_acc:0.9716466739367503 train_f1:0.978972907399919
        eval_loss:0.8745307215937862  eval_acc:0.7681159420289855   eval_f1:0.8044965786901271
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:24<00:00,  1.19it/s, train-loss=0.05]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.76it/s, eval-loss=0.85]
epoch:6 train_loss:0.047642045031445736 train_acc:0.982824427480916 train_f1:0.9872495446265938
        eval_loss:0.8515983864113137  eval_acc:0.8359420289855073   eval_f1:0.8802369868810834
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:33<00:00,  1.17it/s, train-loss=0.02]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.76it/s, eval-loss=0.92]
epoch:7 train_loss:0.022214503070108253 train_acc:0.9929116684841875 train_f1:0.9947411003236246
        eval_loss:0.9174031151665581  eval_acc:0.8388405797101449   eval_f1:0.8841666666666667
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:36<00:00,  1.16it/s, train-loss=0.01]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.78it/s, eval-loss=0.97]
epoch:8 train_loss:0.00996485359009055 train_acc:0.9964558342420938 train_f1:0.9973721447341823
        eval_loss:0.9698032449792933  eval_acc:0.8318840579710145   eval_f1:0.8788638262322475
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:37<00:00,  1.16it/s, train-loss=0.02]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.75it/s, eval-loss=0.88]
epoch:9 train_loss:0.016036289190155227 train_acc:0.9956379498364231 train_f1:0.9967637540453075
        eval_loss:0.8814156850179037  eval_acc:0.832463768115942   eval_f1:0.8773865082732287
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 459/459 [06:36<00:00,  1.16it/s, train-loss=0.02]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 216/216 [00:45<00:00,  4.78it/s, eval-loss=0.97]
epoch:10 train_loss:0.016734968862762118 train_acc:0.9934569247546347 train_f1:0.9951475940153659
        eval_loss:0.9664180896900318  eval_acc:0.8336231884057971   eval_f1:0.874617737003058
"""

# Extract metrics
metrics = extract_metrics(text)

# Print the extracted metrics
for key, values in metrics.items():
    print(f"{key}: {values}")
